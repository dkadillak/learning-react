December 27th, 2019

Remember:
- import React from ‘react'
- export default <component>
- {} are js objects, use dot notation when fetching fields of the object:
- const test = {text: ‘this is cool’}
- console.log(test.text) -> ‘this is cool’
- comments are exactly like java (single line = ‘//‘, multi-line with ‘/* */‘)
- you must import the .css files you are using (thanks to webpack), need .css extension
- web pack manages the imports (you can see this in DOM where it inserts the css style tags)
- cmd + option + 'c' to bring up developer tools in chrome on mac
- ctrl + option + 'b' to format code in atom




create-react-app contains all the dev tools you need for a react app
install it with npm install -g create-react-app
npm, or the node package manager, comes with the node js installation

to make a react app:
1. navigate to where you want to make the react folder (optional)
2. run create-react-app <project_name> <project location>

Understanding the folder structure
package.json => specify general dependencies
node modules => holds all dependencies, shouldn’t edit anything in here
public => root folder that gets served by the web server. Holds only the files we can edit. Script files are editable in the src file
index.html is the single html page you will have. If you are creating a multi page project you would create a new react app for that page

<div id=‘root’></div> => where we mount the react app

index.html is where we add meta tags

manifest.json => there because the create-react-app gives you a react app out of the box

src folder => our actual react application
index.js

App.css => defines stylings
registerServiceWorker.js => pre cache our script files


Understanding component basics:


import React, { Component } from ‘react’;
class <ClassName> extends Component {
	render(){
	//has to return some jsx/html code that can be rendered to the DOM and to the screen
	}
}
export default App;

this jsx syntax will be compiled as recursive React.createElement(element, configuration, children), one React.createElement call for each child and sub children of that child.



Understanding jsx:
jsx looks like html but isn’t. It’s just syntactical sugar.  In most cases it acts just like html.
Since were writing in a js file there are certain keywords we can’t use. That’s why we see things like

<div className=‘App></div> in jsx instead of what you would expect in html <div class=‘App’></div>

also in jsx you can only return one element, i.e. everything you return needs to be wrapped in one root element in your component. This means you probably wrap everything in a <div></div> tag.

Creating a functional component:
Component folders should start with a capital letter, inside should be <folder_name>.js
in it’s simplest form, a component is a function that returns some jsx
uppercase naming scheme is important when naming components so react recognizes that you’re referencing a custom component

Outputting dynamic content
 When importing your custom component, you can feed it values like you would an html tag:
	<CustomTag Value=‘val’ Value2=‘val2’/>
props.children refers to anything passed in between custom component tags:
	<CustomTag Value=‘lala’> here’s some plain text <CustomTag/>

In your component (just a functional component):
import React from ‘react’
	const CustComponent = (props) => {

	return (
	<div>
		<p> Hi i’m {props.name} </p>
		<p> {props.children} </p>
	<div/>
	)
}

Understanding and Using state:
hooks allow you to manage state with functional components
Use functional components as often as possible because you want to handle state with care


state is simply a property of the component class. It must be called ‘state’, but essentially it points to a js object
when referencing state within a class based component, use this.state
you can pass state down to functional components but functional components can’t directly edit the passed down state

Handling events with methods:
<button onClick
note, not onclick, must be capital ‘C’ since it’s jsx

Typically you use the word ‘Handler’ in methods you aren’t directly calling, it’s simply an event handler

<button onClick={this.function()}/> actually calls the function when the page is rendered, which we may or may not want.
If you want a function to be called on the actual click, you need to pass in a reference to the function which means the button tag looks like this: <button onClick={this.function}/>

list of supported events you can listen to: https://reactjs.org/docs/events.html#supported-events



Manipulating the state:
don’t do this: this.state.whatever = ‘blah’
Use this.setState (a method inside the Component class we’re inheriting from)
this.setState takes an object as an argument and merges that with your existing state and make changes to the DOM

If state or props changes a reload is triggered (updates existing DOM in all places that needs updating)

Changing state in functional components:
useState is the most important state hook
you call it like a function useState(arg1);  arg1 is your state
when using react hooks, the function you use to modify state does not merge state, it replaces state.
That means when changing state in functional components, you have to preserve all other elements of your state
 To get around this you can have multiple useState calls that operate only on slices of your overall state.

the general syntax for useState is as follows:

const [stateObject, functionToOperateOnState] = useState({
	persons: [
		{name: ‘devin’, age: 24}
	]
});

you could have another useState call for another slice of your state:

const [stateObject2, functionToOperateOnStateObject2] = useState(‘I am a cool person’);
which you would reference with stateObject2 since your state can be literally whatever you want, a string, an object, an int, e.t.c.


Stateless vs stateful components:
Every component receives props.
Stateful component: a component that manages state (class based of functional component)

Good practice to create as many stateless or ‘dumb’  or ‘presentational’ components as possible
State components are called ‘smart’ or ‘container’ components. Only want to have a couple for ease of maintenance


Passing Method References Between Components:
You can pass methods that might change the state as a prop

StateHandler Functions, how do we pass in arguments?
can be done 2 ways:
1. <button onClick={this.stateHandler.bind(this, arg1, arg2, ….. , argN} />
2. <button onClick = {()=> this.stateHandler(arg1, arg2, … , argN)}

apparently option 2 has a performance hit as React will re-render more than it needs to, so be cautious with option 2

Adding Two Way Binding:
Set the value of your text field to be props.whatever, then have your onChange method set to whatever the parent passes down to you. That way the default value is set, and changes are also reflected from the child up to the parent

Styling components:
2 ways to do it
.css files or inline styles

inline styles:
styling is scoped to the component you are using it with, don’t have direct access to all css features.
	const style = {
		backgroundColor: ‘white’, (or ‘background-color’: ‘white’)
		font: ‘inherit’,
		border: ‘1px solid blue’,
		padding: ‘8px’
		cursor: ‘pointer’
};

There are some restrictions with inline styles like configuring hovering effects

now in the tag you want to add style to, <button style = {style}} />
*sidenote* with a .css class  it’s defined with .Name {} where each attribute is defined like blah: bleh; if you want to define a specific style that you will set a tag’s className to. You could also do something like div {} which would modify all dif tags globally if you import that css file

if you have a const javascript object, you can still change values, you just can't add new keys.

Example:
const style = {
	backgroundColor: 'red'
}

style.backgroundColor = 'green'
is totally acceptable, just not style['font'] = 'inherit' (remember dot notation here too: style.font = 'inherit')

you can apply multiple classnames to an element if they're separated by a space -> 'red app bold' if those are all defined in whatever .css you're importing
A pseudo-class is a selector that selects elements that are in a specific state, e.g. they are the first element of their type, or they are being hovered over by
the mouse pointer.

radium allows you to use all psuedo selectors

Media queries is a CSS3 module allowing content rendering to adapt to conditions such as screen resolution. It became a W3C recommended standard in June 2012, and is a cornerstone technology of responsive web design.

tagged template literals, what the fuck!
styled from styled-components has a function for every html element that is itself its own component. You can feed in css (including media queries) directly to the function using the tagged template literals notation.
Example:

const StyleDiv = styled.div`
	text-align:center
	@media(min - width : 500 px) : {
	  width: 450 px
	}
`;

now wrap the content you want to apply this style to with the <StyleDiv><StyleDiv/> tag
* remember!!!!! you use BACKTICKS, these guys: ``. Don't use normal ticks, ''. Subtleeeeeee! This already destroyed me

Also also, with styled components, if you are passing in props then remember the syntax is as follows:

const buttonStyle = styled.button`
	background-color = ${ props => props.bool ? 'green' : 'blue'}
`

What i'm trying to show you is that it's ${} with curly braces and NOT $(). That destroyed me harder then the back ticks thing

CSS MODULES:
look more into l8r

Debugging React Apps:
	* you can enter a debugger in react developer tools
	* install react developer tools
	* open developer console with SHIFT + CTRL + J

ErrorBoundary:
	- created just like stateful components
	- componentDidCatch = (error, info) => { set state}
		* react auto calls this on components wrapped in this tag
		* this means that ErrorBoundary will return this.props.children (the component that the ErrorBoundary is wrapping) if componentDidCatch wasn't called, i.e. 'hasError' portion of state wasn't updated. If there was an error, return your custom error message + tag + styling


Splitting an app into components:
	* want just a few state managing components, and mostly presentational/dumb components
	* all class based components are state managing, presentational components can manage state but traditionally they don't
	* you want your class based components render method compact, not a lot of ui stuff

	* component should be focused

component lifecycle:
	1. constructor(props) -> call super constructor, initialize state, bind methods??
		* in class based components, access your parents state with this.props
	2. getDerivedStateFromProps(props, state) -> static method
		* commponentWillMount is basically the same thing except depricated
			- componentWillReceiveProps is also depricated
			- componentWillUpdate is also depricated
		* rarely used
	3. render()
	4. render child components
	5. componentDidMount() -> where you put http requests and such (called side-effects)

es6 lambda function syntax: 
	* const func = (args) => (jsx goes here);
		- if what's inside () is one line you can omit ()
		- put {} if there's javascript in there

Component Lifecycle - Update
	1.getDerivedStateFromProps
	2. shouldComponentUpdate(nextProps, nextState)
		* add more criteria for a re-render, useful bc it defaults to true and react doesn't do a deep compare props
	3. render()
	4. update child component props
	5. getSnapshotBeforeUpdate(prevProps,prevState) -> ex: return user's cursor back to it's original position after updating
	6. componentDidUpdate()

hook you will use a shit ton:
	- componentDidUpdate(prevProps, prevState, snapshot)
		* fetch new data from server!
	- componentDidMount
	- shouldComponentUpdate(nextProps, nextState)


USE EFFECT
useEffect -> basically componentDidMount and componentDidUpdate in one react lifecycle hook, runs for every render cycle

takes a second argument that tells functional component to execute based on changing of state of second argument (in a persons component, execute useEffect when props.persons changes state)
	* i.e. useEffect(()=>{
	~some js code or sum shit~	
	
	},[props.person, props.blah, props.thisToo])

second argument can be many items as well

you can have multiple useEffect methods

if you want useEffect to run when initially rendered, make that second argument an empty array

you can essentially do componentWillUnmount lifecycle in functional components with the useEffect hook, where the second argument is empty constructor and 1st argument is some clean up function. This will cause cleanup to be called whenever your functional component is re-rendered

HOOKS = FUNCTIONAL COMPONENT (hooks are special functions that allow you to "hook onto" react state and lifecycle features in functional components)

LIFECYCLE FEATURES = CLASS BASED COMPONENT

When using shouldComponentUpdate:
	- be careful comparing props, because objects are essentially pointers to a spot in memory, if you don't deep compare then you will only be comparing references. So for example if you had an array of objects in state and you went through and updated that array in place, you wouldn't re render if your shouldComponentUpdate is just comparing references. You would need a deep compare. If you are replacing that inner object array entirely, then a shouldComponentUpdate would trigger a re render because the array references are different.

	- even if you don't optimize by using shouldComponentUpdate, react uses a virtual dom to figure out if it needs to render the real dom which can catch some optimization misses like using shouldComponentUpdate correctly

	* you can have chrome paint flash rendering so it's easier to see what's getting rerendered in your app

For functional components, when you want similar functionality as shouldComponentUpdate, you can wrap your export statement (export default name) in React.memo(); to get -> export default React.memo(name);
	* react stores a snapshot of the component, only re renders if the input changes, otherwise just returns the snapshot

** Don't always implement shouldComponentUpdate or use React.memo().. Only should be implemented if child isn't super dependent on parent **

PureComponent: component that implements shouldComponentUpdate checking all props passed in and comparing it to the previous state for you. If you want that functionality then don't extend component, import and extend PureComponent



HOW REACT UPDATES DOM
	- render() does not update dom automatically
	- compares virtual doms, the old one vs the suggested one
	- change real dom only in places where there are differences, doesn't re render whole thing
	* ACCESSING THE REAL DOM IS SLOW

Adjacent elements:
	* you can have adjacent elements in a return of a render by putting things into array, where each adjacent element is separated by a comma.
	* you can also have a placeholder component:
		- from React import 'react';
		const placeholder = props => props.children;
		export default placeholder;
	* react provides a placeholder object for you if you want, it's called a Fragment
		- import {React, Fragment}

** The reason why you have to wrap your return in render in one tag is a javascript thing. Jsx really just resolves to React.createElement() calls, and you can't return multiple React.createElement calls. The moment you wrap everything in one tag, you're technically only returning one React.createElement call.

Higher Order Component:
	- wraps another component, maybe provides some logic like error handling or styling or something
	- convention to start name of HOC with 'With'

	- another way to do it:

create a javascript function that returns a higher order component:
	import React from "react";

	const withClass = (WrappedComponent, arg1,.....,argN) => {
		return props => (
			<WrappedComponent Arg1=arg1, ...., ArgN=argN/>
		);
	};
	
	export default withClass;

Now keep in mind this is a javascript function! Here's how you use it:

In the child level component:

import {React, Component} from "react";
import withClass from "withClass";

class App extends Component{
render(){
	return ();
}

}
	
	
export default withClass(App);


It is suggested that you use the <placeHolder> or <Fragment> tag if you'r HOC is adding styling or more jsx, but use the function style if you're adding some js logic/sending analytics data
It's semantics but still

forwarding props dynamically from HOC: <parTag {...props}/>

USING SETSTATE INCORRECTLY:
	- setState doesn't immediately trigger a re-render; it's synchronouse! React schedules a render when react has the resources, therefore depending on this.state for last state is not reliable. You should then use the following arguments in setState:

this.setState((prevState,props) => {

	return {new state based on previous state goes here!};
});

Using PropTypes:
	- npm install --save prop-types
	- import Proptypes from "prop-types"
	- now before your export statement, set up the <ComponentName>.propTypes object:
		Person.propTypes = {
			click: PropTypes.func,
			name: PropTypes.string,
			age: PropTypes.number,
			changes: PropTypes.func			
		};
	- you can even specify PropTypes.func further by specifying what the func should take in as arguments

Reference Switches:
	- can pass into any component:
		ref={(reference_to_current_component) => {do something with that reference!!!!}}
	- only works in class based components

	CAN ALSO DO THIS:
		- in constructor, can create a class variable to track your current reference
		constructor(props) {
			super(props);
			this.<componentName>Ref = React.createRef();
		}
		
		now in what you're going to render you can assign the reference:
		<tag ref = {this.<componentName>Ref} /n
		
		to access the most recent component of type <componentName>Ref:
			- this.<componentName>Ref.current
			- now you can call .focus() on this or whatever


USING REFS IN FUNCTIONAL COMPONENTS
	- there is a useRef hook you can use, import it from 'react'
	- create a const var = useRef(null);
	- now pass ref into what you're rendering, set it to {var} like before
	- then in useEffect() hook you can depend on having a reference to your functional component that you can do stuff with!


UNDERSTANDING PROP CHAINING PROBLEMS
	- React context api helps us solve this issue
	- "globally" available javascript object, passable without using props, but could just be a string, number, e.t.c.
	- globally isn't absolutely correct because you specify which classes can see a given context

 CREATE CONTEXT:
	import React from 'react';
	
	const contextName = React.createContext(<variable your context holds>);
	
	export default contextName;
	
USING CONTEXT:
	- import context where you need it
	- if you're establishing the context values, then wrap the jsx in:
		 <ContextName.Provider value={{isVerified:True, login=this.loginHandler}}>
		</ContextName.Provider>

		* in this example my context is a js obj, value={<initialize whatever you have in your context>}
	- now this is the super cool part. Wherever you want to consume the context, import the context then wrap jsx code you need the context in with:

		<ContextName.Consumer>
		{(context) => return(
			<jsx that needs context.isVerified/context.login goes here />	
		);}
		</ContextName.Consumer>
	- it's important to note that inside Context.Consumer tag, you define a js function that returns some jsx! Keep in mind we're still in the render() method 
	- only changing something in a context object wouldn't trigger a re render cycle

ALTERNATE WAY OF CONSUMING CONTEXT IN CLASS BASED COMPONENT:
	- useful if you want whole component to have access to context
	- declare static variable, set it to the context you imported
	- you now have access to context value with this.context
	- just use this for simplicity and bc it gives whole component access

CONSUMING CONTEXT IN FUNCTIONAL COMPONENTS:
	- import useContext hook
	- import context
	- set variable inside of functional component = useContext(importedContext);
	- now variable holds value of the importedContext contents!

** NOTE, REDUX HELPS WITH PROPS CHAINING JUST LIKE CONTEXT **

HOW TO PLAN A REACT APPLICATION
	1. plan component tree/structure (what parts of my project do I have)
	2. application state (what data do i need to keep track of)
	3. components vs. containers (which components should be stateful/stateless)

USEFUL KNOWLEDGE
() is for jsx
{} is for js logic
ALT + J = open dev tools in chrome
CTRL + F5 = reload and clear cache
stateful component: caps case LikeThisRightHere
stateless components: lower case LikeThisRightHere















 
